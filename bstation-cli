#!/bin/sh

tmp="$PWD/.bstation-cli.tmp"
session_tmp="$PWD/.bstation-cli.session"
session=""
sub_tmp="$PWD/.subtitle.bcc"
sub_path="$PWD/.subtitle.srt"
ep_tmp="$PWD/.episode-list.tmp"
query=""
anime_id=""
episode_id=""

get_session() {
    # The better term for this is, maybe, get_cookies.
    # But session just sounded cooler, and its meaning didn't stray so far off.

    # If .bstation-cli.session doesn't exist, get cookies and write them to it.
    [ -n "$session_tmp" ] && curl -c "$session_tmp" -s "https://www.bilibili.tv" > /dev/null
        
    # Get the unique buvid3 from .bstation-cli.session,
    # This will be needed for search_anime and watch_anime procedures.
    session=`sed -n 5p "$session_tmp" | sed 's/.*buvid3\t//'`
}

search_anime() {
    # As the name of the function suggests, search for anime in the bilibili.tv database.
    # Do some stream editing, and finally write the result to .bstation-cli.tmp

    curl -s "https://api.bilibili.tv/intl/gateway/web/v2/search?buvid=$session&keyword=$query&platform=web&pn=1&ps=20&qid=&s_locale=en_US&timezone=GMT%2B07" \
        | sed 's/^.*"module":"ogv",//;s/,{"module":"ugc",.*$//' \
        | sed 's/,/,\n/g' | grep "{\"title\":\|\"season_id\"" \
        | sed 's/"items":\[//' > "$tmp"
}

choose_sub() {
    # Blatantly asks for choice of language for the subtitle.
    # This was a risky move, because there will probably be some shows that doesn't have Eng/Ind subtitle.
    # But I thought that those shows are becoming less and less now that I don't want to care.

    echo "Choose subtitle:"
    echo "[1] English"
    echo "[2] Bahasa Indonesia"
    echo -n "Enter number: "
    read sub_opt
    
    if [ $sub_opt -eq 1 ]; then
        sub_opt="English"
    elif [ $sub_opt -eq 2 ]; then
        sub_opt="Bahasa Indonesia"
    fi
}

get_episode() {
    # Asks the user to select an episode.

    total_ep=`cat "$ep_tmp" | wc -l`
    echo -n "Choose episode [1-$total_ep]: "
    read selected_ep
    if [ $selected_ep -gt 0 ] && [ $selected_ep -le $total_ep ]; then
        episode_id=`sed -n ${selected_ep}p "$ep_tmp"`
    else
        echo "Invalid number."
    fi
}

convert_sub() {
    # Bilibili has a unique format for subtitle, you can try to see it yourself to better understand what I meant.
    # I didn't know what the extension really is, I thought it was .bcc but maybe I was wrong.
    # I made this conversion method mainly using sed to edit the subtitle so it matches the .srt sample I found on the internet.

    # Maybe it will make the watching experience better if this conversion can be done in real-time while watching,
    # but I don't know how to do it.

    sed 's/^.*:\[//;s/},/\n/g' "$tmp" > "$sub_tmp"
    total_lines=`cat "$sub_tmp" | wc -l`
    total_lines=$(( total_lines += 1 ))
    curr_line=1

    while [ $curr_line -le $total_lines ]; do
        from_msecs=`cat "$sub_tmp" | sed -n ${curr_line}p | sed 's/^.*from\"://;s/,\"to.*$//;s/^.*\.//'`
        from_secs=`cat "$sub_tmp" | sed -n ${curr_line}p | sed 's/^.*from\"://;s/,\"to.*$//;s/\..*$//'`

        if [ $from_secs -ge 3600 ]; then
            from_hrs=$(( $from_secs / 3600 ))
            if [ $from_hrs -ge 1 ] && [ $from_hrs -le 9 ]; then
                from_hrs=0$from_hrs
            fi
            from_secs=$(( $from_secs % 3600 ))
        else
            from_hrs=00
        fi

        if [ $from_secs -ge 60 ]; then
            from_mins=$(( $from_secs / 60 ))
            if [ $from_mins -ge 1 ] && [ $from_mins -le 9 ]; then
                from_mins=0$from_mins
            fi
            from_secs=$(( $from_secs % 60 ))
        else
            from_mins=00
        fi

        to_msecs=`cat "$sub_tmp" | sed -n ${curr_line}p | sed 's/^.*to\"://;s/,.*$//;s/^.*\.//'`
        to_secs=`cat "$sub_tmp" | sed -n ${curr_line}p | sed 's/^.*to\"://;s/,.*$//;s/\..*$//'`

        if [ $to_secs -ge 3600 ]; then
            to_hrs=$(( $to_secs / 3600 ))
            if [ $to_hrs -ge 1 ] && [ $to_hrs -le 9 ]; then
                to_hrs=0$to_hrs
            fi
            to_secs=$(( $to_secs % 3600 ))
        else
            to_hrs=00
        fi

        if [ $to_secs -ge 60 ]; then
            to_mins=$(( $to_secs / 60 ))
            if [ $to_mins -ge 1 ] && [ $to_mins -le 9 ]; then
                to_mins=0$to_mins
            fi
            to_secs=$(( $to_secs % 60 ))
        else
            to_mins=00
        fi

        echo $curr_line >> "$sub_path"
        echo ${from_hrs}:${from_mins}:${from_secs},${from_msecs} \-\-\> ${to_hrs}:${to_mins}:${to_secs},${to_msecs} >> "$sub_path"

        cat "$sub_tmp" | sed -n ${curr_line}p | sed 's/^.*content\":\"//;s/\"$//;s/\\n/\n/g;s/\\//g;s/u003ciu003e//g;s/u003c\/iu003e//g;s/}\]}//' >> "$sub_path"
        
        echo >> "$sub_path"
        curr_line=$(( curr_line += 1 ))
    done
}

watch_anime() {
    # Get the video, audio, and subtitle data,
    # and play them in mpv.

    # Reset screen
    tput reset

    echo "Getting episode data..."
    curl -s "https://api.bilibili.tv/intl/gateway/web/playurl?buvid=$session&device=wap&ep_id=$episode_id&platform=web&qn=64&s_locale=en_US&tf=0&timezone=GMT%2B07&type=0" > "$tmp"

    # Get the video url, but the video won't have any audio yet.
    video_url=`sed 's/480P.*$//;s/^.*720P.*\"url\"//' "$tmp" \
        | cut -d\" -f 2 \
        | sed 's/\\\u0026/\&/g'`

    # Get the audio url
    audio_url=`sed 's/^.*\"audio_resource\"//;s/^.*30216.*\"url\"//' "$tmp" \
        | cut -d\" -f 2 \
        | sed 's/\\\u0026/\&/g'`

    # Get the subtitle url
    curl -s "https://api.bilibili.tv/intl/gateway/web/v2/subtitle?buvid=$session&episode_id=$episode_id&platform=web&s_locale=en_US&timezone=GMT%2B07" > "$tmp"
    sub_url=`sed "s/\"$sub_opt\",.*$//;s/^.*\"url\"//" "$tmp" \
        | cut -d\" -f 2`

    # Get the actual subtitle and write them to .bstation-cli.tmp
    curl -s "$sub_url" > "$tmp"

    # Convert the acquired subtitle to .srt
    echo "Converting subtitle..."
    rm -f "$sub_path"; convert_sub

    # Play the episode
    echo "Currently playing $title episode ${selected_ep}/${total_ep}..."
    setsid -f mpv "$video_url" --audio-file="$audio_url" --sub-file="$sub_path" --sub-font-size=32 > /dev/null 2>&1 
}

######
# Main
######

main() {
    # This function will ask the user for search query,
    # call the search_anime fucntion,
    # display the search results,
    # asks the user to select a title,
    # gets its episode list using python + selenium webdriver
    # and finally run the get_episode procedure.

    # I made these steps to a procedure to make possible the "search for another anime" option in main loop.

    title_num=1
    list_num=1
    selected_anime=0
    tmp_query=""
    echo -n "Search Anime: "
    read tmp_query
    echo $tmp_query > "$tmp"
    query=`sed 's/\ /\+/g' "$tmp"`

    search_anime

    title=`sed -n ${title_num}p "$tmp"`

    if [ -z "$title" ]; then
        echo "No result."
        sleep 1s; exit
    else
        while [ -n "$title" ]; do
            echo -n "[$list_num] "
            sed -n ${title_num}p "$tmp" | cut -d\" -f 4 | sed 's/^\ *//;s/\\u0026 //g'
            list_num=$(( list_num + 1 ))
            title_num=$(( title_num + 2 ))
            title=`sed -n ${title_num}p "$tmp"`
        done
    fi
    
    echo -n "Enter number: "
    read selected_anime
    if [ $selected_anime -gt 0 ] && [ $selected_anime -lt $list_num ]; then
        selected_anime=$(( selected_anime * 2 ))
        anime_id=`sed -n ${selected_anime}p "$tmp" | cut -d: -f 2 | sed 's/,//'`
        selected_anime=$(( selected_anime - 1 ))
        title=`sed -n ${selected_anime}p "$tmp" | cut -d\" -f 4 | sed 's/^\ *//'`
        choose_sub
        sed "9 s/\".*\"/\"https:\/\/www\.bilibili\.tv\/en\/play\/$anime_id\"/" "script_template.py" > "script.py"
        echo "Getting episode list..."
        python script.py > /dev/null
        grep "^.*active\"><a href=\"/en/play/$anime_id/.*\"\|^.*card\"><a href=\"/en/play/$anime_id/.*\"" "$tmp" \
            | sed "s/^.*\/en\/play\/$anime_id\///;s/\".*$//" > "$ep_tmp"
        get_episode
    else
        echo "Invalid number."
        sleep 1s; exit
    fi
}

######
# Start Up
######

tput reset

echo "===================="
echo "=== BSTATION-CLI ==="
echo "===================="
echo ""

get_session

playing=1
title=""
total_ep=0
selected_ep=0
sub_opt=0

main

# This is the main loop.
while [ $playing -eq 1 ]; do
    watch_anime
    echo "[n] Next episode"
    echo "[p] Previous episode"
    echo "[s] Select episode"
    echo "[a] Search for another anime"
    echo "[q] Quit"
    echo -n "Enter choice: "
    read choice
    case $choice in
        n)
            selected_ep=$(( selected_ep + 1 ))
            [ $selected_ep -gt $total_ep ] && echo "End of anime." && sleep 1s && exit
            episode_id=`sed -n ${selected_ep}p "$ep_tmp"`
            ;;

        p)
            selected_ep=$(( selected_ep - 1 ))
            [ $selected_ep -le 0 ] && echo "Invalid episode." && sleep 1s && exit
            episode_id=`sed -n ${selected_ep}p "$ep_tmp"`
            ;;

        s)
            get_episode
            ;;

        a)
            tput reset
            main
            ;;

        q)
            playing=0
            ;;

        *)
            echo "Invalid choice."
            sleep 1s; exit
            ;;

    esac
done

# Removes all trashes.
rm -f "$tmp"
rm -f "$sub_tmp"
rm -f "$sub_path"
rm -f "$ep_tmp"
rm -f "script.py"
